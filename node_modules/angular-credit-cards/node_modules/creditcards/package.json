{
  "name": "creditcards",
  "version": "0.3.3",
  "description": "Utility methods for formatting and validating credit cards",
  "main": "index.js",
  "scripts": {
    "test": "mocha test"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/bendrucker/creditcards.git"
  },
  "keywords": [
    "credit",
    "cards",
    "validation",
    "formatting"
  ],
  "author": {
    "name": "Ben Drucker",
    "email": "bvdrucker@gmail.com",
    "url": "http://www.bendrucker.me/"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/bendrucker/creditcards/issues"
  },
  "homepage": "https://github.com/bendrucker/creditcards",
  "devDependencies": {
    "chai": "~1.9.1",
    "mocha": "~1.20.1"
  },
  "dependencies": {
    "camel-case": "~0.1.0"
  },
  "readme": "creditcards [![Build Status](https://travis-ci.org/bendrucker/angular-credit-cards.svg?branch=master)](https://travis-ci.org/bendrucker/angular-credit-cards) [![NPM version](https://badge.fury.io/js/creditcards.svg)](http://badge.fury.io/js/creditcards)\n============\n\nUtility methods for formatting and validating credit cards. With a minimal footprint and a flexible API, it's suitable for both Node and the browser.\n\n# API\n\n#### `validate(card)`\n\n* Arguments:\n  * `card` (object)\n    * `number` (string)\n    * `expirationMonth` (number)\n    * `expirationYear` (number)\n    * `cvc` (string)\n* Returns:\n  * object\n    * `card`\n      * `type` (string) - the [type](#cardtypenumber---string) of the provided card\n      * `number` (string)\n      * `expirationMonth` (number)\n      * `expirationYear` (number)\n      * `cvc` (string)\n    * `validCardNumber` (boolean)\n    * `validExpirationMonth` (boolean)\n    * `validExpirationYear` (boolean)\n    * `validCvc` (boolean)\n    * `expired` (boolean) - whether the expiration date has passed\n\n## `card`\n\n#### `card.parse(number)` -> `String`\nRemoves all non-numeric characters from a card number, including punctuation and spacing. If a non-string is provided, it returns an empty string.\n\n---\n\n#### `card.type(number)` -> `String`\nReturns the matched card type, or `undefined` if there was no match. Valid card types are:\n* Visa\n* MasterCard\n* American Express\n* Diners Club\n* Discover\n* JCB\n\n---\n\n#### `card.luhn(number)` -> `Boolean`\nChecks the card number's validity using the [Luhn algorithm](http://en.wikipedia.org/wiki/Luhn_algorithm).\n\n#### `card.isValid(number [, type])` -> `Boolean`\nValidates the number using `card.luhn`. Also checks that the card matches a given [type](#cardtypenumber---string) if provided. \n\n## `cvc`\n\n#### `isValid(cvc [, type])` -> `Boolean`\nChecks whether a card verification code is a valid 3-4 digit numeric string. If a [`type`](#cardtypenumber---string) is provided, the length will be validated for the card type (4 for American Express, 3 for others).\n\n## `expiration`\n\n#### `isPast(month, year)` -> `Boolean`\nChecks whether a given month and year pair (both `Number`) are in the past.\n\n---\n\n### `expiration.month`\n\n#### `expiration.month.parse(month)` -> `Number`\nCasts the provided `month` value to a `Number`. All of the following will be `5` after parsing: `5`, `'05'`, `'5'`. Returns `undefined` for non-numeric values.\n\n---\n\n#### `expiration.month.isValid(month)` -> `Boolean`\nChecks whether the provided month (`Number`) is valid (between 1 and 12).\n\n---\n\n### `expiration.year`\n\n#### `expiration.year.parse(year [, pad])` -> `Number`\nCasts the provided year value to  a `Number`. If `pad` is `true`, `year` is assumed to be a two digit number or numeric string. All of the following are equivalent: `expiration.year.parse(2014)`, `expiration.year.parse('2014')`, `expiration.year.parse('14', true)`, `expiration.year.parse(14, true)`. Returns `undefined` for non-numeric values.\n\n---\n\n#### `expiration.year.isValid(year)` -> `Boolean`\nChecks whether the provided year (`Number`) is valid (> 0).\n\n---\n\n#### `expiration.year.isPast(year)` -> `Boolean`\nChecks whether a given year (`Number`) is in the past.\n\n## Why Another Library?\nThere are lots of other useful credit card validation and parsing modules. creditcards specifically takes inspiration from [credit-card](https://www.npmjs.org/package/credit-card), but there are [many others](https://www.npmjs.org/search?q=credit%20card). creditcards was specifically designed for browser use for handling payment forms. That means:\n\n1. Browserified, it's only a few kilobytes, even before minification.\n2. It provides an API for parsing user inputs.\n3. The card type is optional.\n\n## License\n\n[MIT](LICENSE)\n",
  "readmeFilename": "README.md",
  "_id": "creditcards@0.3.3",
  "dist": {
    "shasum": "80c8b66b569e5af5736169d27ba17980a0fce778"
  },
  "_from": "creditcards@~0.3.0",
  "_resolved": "https://registry.npmjs.org/creditcards/-/creditcards-0.3.3.tgz"
}
