{
  "name": "angular-credit-cards",
  "version": "0.1.1",
  "description": "Angular directives for formatting and validating credit card inputs",
  "main": "src/module.js",
  "scripts": {
    "test": "karma start --single-run"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/bendrucker/angular-credit-cards.git"
  },
  "keywords": [
    "angular",
    "credit",
    "card",
    "payments",
    "validation",
    "directive",
    "form"
  ],
  "author": {
    "name": "Ben Drucker",
    "email": "bvdrucker@gmail.com",
    "url": "http://www.bendrucker.me/"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/bendrucker/angular-credit-cards/issues"
  },
  "homepage": "https://github.com/bendrucker/angular-credit-cards",
  "devDependencies": {
    "browserify": "~4.1.8",
    "browserify-shim": "~3.5.0",
    "chai": "~1.9.1",
    "karma": "~0.12.16",
    "karma-bro": "~0.4.0",
    "karma-chai-sinon": "~0.1.3",
    "karma-cli": "0.0.4",
    "karma-mocha": "~0.1.3",
    "karma-phantomjs-launcher": "~0.1.4",
    "mocha": "~1.20.1",
    "sinon": "~1.10.2",
    "sinon-chai": "~2.5.0",
    "watchify": "~0.10.2"
  },
  "dependencies": {
    "creditcard": "~0.1.1",
    "creditcards": "~0.3.0"
  },
  "browserify": {
    "transform": [
      "browserify-shim"
    ]
  },
  "browserify-shim": {
    "angular": "global:angular"
  },
  "readme": "angular-credit-cards [![Build Status](https://travis-ci.org/bendrucker/angular-credit-cards.svg?branch=master)](https://travis-ci.org/bendrucker/angular-credit-cards) [![NPM version](https://badge.fury.io/js/angular-credit-cards.svg)](http://badge.fury.io/js/angular-credit-cards)\n====================\n\nA set of Angular directives for constructing credit card payment forms. Uses [creditcards](https://www.npmjs.org/package/creditcards) to parse and validate inputs. Pairs well with [angular-stripe](https://www.npmjs.org/package/angular-stripe) or any other payments backend.\n\n## Getting Started\n\nInclude `'angular-credit-cards'` in your module's dependencies:\n\n```js\nangular.module('myApp', [\n  'angular-credit-cards'\n]);\n```\n\nIf you'd like to use the [creditcards](https://www.npmjs.org/package/creditcards) API directly, you can inject the service as `creditcards`.\n\n## Usage and API\n\nWith the exception of `ccExp`, all directives require `ngModel` on their elements. While designed to be used together, all directives except `ccExp` can be used completely independently. \n\nAll directives apply a [numeric input pattern](http://bradfrostweb.com/blog/mobile/better-numerical-inputs-for-mobile-forms/) so that mobile browsers use a modified version of the enlarged telephone keypad. You can optionally set `type=\"number\"` for the month (`cc-exp-month`) and year (`cc-exp-year`) inputs. You should use `type=\"text\"` for `cc-number` and `cc-cvc`.\n\n### Card Number (`cc-number`)\n\n```html\n<input type=\"text\" ng-model=\"card.number\" cc-number />\n```\n\n* Strips all punctuation and spaces\n* Validates the card against the [Luhn algorithm](http://en.wikipedia.org/wiki/Luhn_algorithm)\n* Exposes the [card type](https://github.com/bendrucker/creditcards/blob/master/README.md#cardtypenumber---string) as `$type` on the model controller\n\n```html\n<form name=\"paymentForm\">\n  <input type=\"text\" ng-model=\"card.number\" name=\"cardNumber\" cc-number />\n</form>\nPaying with {{cardNumber.$type}}\n```\n\n### CVC (`cc-cvc`)\n\n```html\n<input type=\"text\" ng-model=\"card.cvc\" cc-cvc />\n<input type=\"text\" ng-model=\"card.cvc\" cc-type=\"cardNumber.$type\" />\n```\n\n* Sets `maxlength=\"4\"`\n* Validates the CVC\n\nYou can optionally specify a scope property that stores the card type as `cc-type`.\n\n### Expiration (`cc-exp`, `cc-exp-month`, `cc-exp-year`)\n\n```html\n<div cc-exp>\n  <input type=\"number\" ng-model=\"card.exp_month\" cc-exp-month />\n  <input type=\"number\" ng-model=\"card.exp_year\" cc-exp-year />\n</div>\n```\n\n* `cc-exp-month`\n  * Sets `maxlength=\"2\"`\n  * Validates the month\n  * Converts it to a number\n* `cc-exp-year`\n  * Sets `maxlength=\"2\"`\n  * Converts the year to a 4 digit number (`'14'` -> `2014`)\n  * Validates the year\n  * Validates that the expiration year has not passed\n* `cc-exp`\n  * Validates that the month/year pair has not passed\n\n`cc-exp` must be placed on a parent element of `cc-exp-month` and `cc-exp-year`.\n\n## Form Validation\n\nBackground Reading: \n* [Angular Documentation: Forms](https://docs.angularjs.org/guide/forms)\n* [Angular Form Validation (Scotch.io)](http://scotch.io/tutorials/javascript/angularjs-form-validation)\n* [Form validation with AngularJS (ng-newsletter)](http://www.ng-newsletter.com/posts/validations.html)\n\nangular-credit-cards sets validity keys that match the directive names (`ccNumber`, `ccCvc`, `ccExp`, `ccExpMonth`, `ccExpYear`). You can use these keys or the form css classes in order to display error messages.\n\n## License\n\n[MIT](LICENSE)\n",
  "readmeFilename": "README.md",
  "_id": "angular-credit-cards@0.1.1",
  "dist": {
    "shasum": "ee43d1ccc002d9707a1973eb9dab8d0f84a06475"
  },
  "_from": "angular-credit-cards@",
  "_resolved": "https://registry.npmjs.org/angular-credit-cards/-/angular-credit-cards-0.1.1.tgz"
}
